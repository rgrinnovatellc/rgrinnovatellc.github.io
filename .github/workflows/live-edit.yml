name: Live Edit Pull Request Handler

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  review-live-edit:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.title, 'Update') && contains(github.event.pull_request.title, '_pages')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
    
    - name: Install Jekyll dependencies
      run: |
        gem install bundler
        bundle install
    
    - name: Build site
      run: bundle exec jekyll build
    
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Live Edit Review')
          );
          
          const message = `## üîç Live Edit Review
          
          **File Updated:** \`${{ github.event.pull_request.title }}\`
          
          **Status:** ‚úÖ Site builds successfully
          
          **Changes Summary:**
          - Live edit changes have been submitted
          - Jekyll build completed without errors
          - Ready for review and merge
          
          **Next Steps:**
          1. Review the changes in the diff
          2. Test the site locally if needed
          3. Approve and merge the pull request
          
          ---
          *This review was automatically generated by the Live Edit system.*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: message
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
          }
    
    - name: Add labels
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            labels: ['live-edit', 'documentation']
          }); 